(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{100:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return l})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return s}));var r=t(3),i=t(7),a=(t(0),t(120)),o={id:"compile",title:"Compile"},l={unversionedId:"compile",id:"compile",isDocsHomePage:!1,title:"Compile",description:"Compiling the Benchmarks",source:"@site/docs/compile.md",slug:"/compile",permalink:"/gbbs/docs/compile",version:"current",sidebar:"docs",previous:{title:"Install",permalink:"/gbbs/docs/install"},next:{title:"Running Benchmarks",permalink:"/gbbs/docs/run"}},c=[{value:"Compiling the Benchmarks",id:"compiling-the-benchmarks",children:[]},{value:"Cleaning the Build",id:"cleaning-the-build",children:[]},{value:"Other Build Options",id:"other-build-options",children:[]}],p={toc:c};function s(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"compiling-the-benchmarks"},"Compiling the Benchmarks"),Object(a.b)("h4",{id:"using-bazel"},"Using Bazel"),Object(a.b)("p",null,"You can build the benchmarks as follows:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-sh"},"# For Bazel:\n$ bazel build //...  # compiles all benchmarks\n")),Object(a.b)("p",null,"Note that our bazel configuration file builds optimized binaries using\nthe",Object(a.b)("inlineCode",{parentName:"p"},"-c opt")," mode by default. You can build a debug binary by\nexplicitly supplying the ",Object(a.b)("inlineCode",{parentName:"p"},"-c dbg")," option to bazel."),Object(a.b)("h4",{id:"using-make"},"Using Make:"),Object(a.b)("p",null,"First set the appropriate environment variables. For example, if you\nwould like to compile with Cilk Plus first run ",Object(a.b)("inlineCode",{parentName:"p"},"export CILK=1"),". If no\noptions are set, the default is to use the homegrown scheduler.\nAfter that, build using ",Object(a.b)("inlineCode",{parentName:"p"},"make"),"."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre"},"$ cd benchmarks/BFS/NonDeterministicBFS  # go to a benchmark\n$ make -j  # build the benchmark with all threads\n")),Object(a.b)("h2",{id:"cleaning-the-build"},"Cleaning the Build"),Object(a.b)("p",null,"The following commands cleans the directory:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-sh"},"# For Bazel:\n$ bazel clean  # removes all executables\n\n# For Make:\n$ make clean  # removes executables for the current directory\n")),Object(a.b)("h2",{id:"other-build-options"},"Other Build Options"),Object(a.b)("h4",{id:"graphs-with-more-than-232-edges"},"Graphs with more than 2^32 Edges"),Object(a.b)("p",null,"To compile codes for graphs with more than 2^32 edges, the ",Object(a.b)("inlineCode",{parentName:"p"},"LONG")," command-line\nparameter should be set. If the graph has more than 2^32 vertices, the\n",Object(a.b)("inlineCode",{parentName:"p"},"EDGELONG")," command-line parameter should be set. Note that the codes have not\nbeen tested with more than 2^32 vertices, so if any issues arise\nplease mail ",Object(a.b)("a",{parentName:"p",href:"mailto:laxman@mit.edu"},"laxman@mit.edu"),"."),Object(a.b)("h4",{id:"specifying-different-schedulers"},"Specifying Different Schedulers"),Object(a.b)("p",null,"To compile with the Cilk Plus scheduler instead of the Homegrown scheduler, use\nthe Bazel configuration ",Object(a.b)("inlineCode",{parentName:"p"},"--config=cilk"),". To compile using OpenMP instead, use\nthe Bazel configuration ",Object(a.b)("inlineCode",{parentName:"p"},"--config=openmp"),". To compile serially instead, use the\nBazel configuration ",Object(a.b)("inlineCode",{parentName:"p"},"--config=serial"),". (For the Makefiles, instead set the\nenvironment variables ",Object(a.b)("inlineCode",{parentName:"p"},"CILK"),", ",Object(a.b)("inlineCode",{parentName:"p"},"OPENMP"),", or ",Object(a.b)("inlineCode",{parentName:"p"},"SERIAL")," respectively.)"))}s.isMDXComponent=!0},120:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return d}));var r=t(0),i=t.n(r);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=i.a.createContext({}),s=function(e){var n=i.a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},b=function(e){var n=s(e.components);return i.a.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},m=i.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),b=s(t),m=r,d=b["".concat(o,".").concat(m)]||b[m]||u[m]||a;return t?i.a.createElement(d,l(l({ref:n},p),{},{components:t})):i.a.createElement(d,l({ref:n},p))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=m;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<a;p++)o[p]=t[p];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"}}]);