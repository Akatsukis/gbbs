(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{120:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=a.a.createContext({}),s=function(e){var t=a.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},b=function(e){var t=s(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),b=s(n),d=r,m=b["".concat(i,".").concat(d)]||b[d]||u[d]||o;return n?a.a.createElement(m,c(c({ref:t},p),{},{components:n})):a.a.createElement(m,c({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var p=2;p<o;p++)i[p]=n[p];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},99:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return s}));var r=n(3),a=n(7),o=(n(0),n(120)),i={id:"sage",title:"Sage (Semi-Asymmetric Graph Engine)"},c={unversionedId:"sage/sage",id:"sage/sage",isDocsHomePage:!1,title:"Sage (Semi-Asymmetric Graph Engine)",description:"This page contains information about how to build and run the",source:"@site/docs/sage/sage.md",slug:"/sage/sage",permalink:"/gbbs/docs/sage/sage",version:"current"},l=[{value:"Download",id:"download",children:[]},{value:"Compile",id:"compile",children:[]},{value:"Graph Formats",id:"graph-formats",children:[]},{value:"Running",id:"running",children:[]}],p={toc:l};function s(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"This page contains information about how to build and run the\nNVRAM-based code used in our paper ",Object(o.b)("a",{parentName:"p",href:"https://arxiv.org/abs/1910.12310"},"Sage: Parallel Semi-Asymmetric\nGraph Algorithms for NVRAMs"),"."),Object(o.b)("h2",{id:"download"},"Download"),Object(o.b)("p",null,"Our code is currently included as part of the GBBS benchmarks, under the\ntop-level ",Object(o.b)("inlineCode",{parentName:"p"},"sage")," directory. You can download the code by cloning the\ngbbs repository through ssh (see our\n",Object(o.b)("a",{parentName:"p",href:"https://github.com/ParAlg/gbbs"},"github")," for other download options)."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"git clone git@github.com:ParAlg/gbbs.git\n")),Object(o.b)("h2",{id:"compile"},"Compile"),Object(o.b)("p",null,"Compilation requires the ",Object(o.b)("inlineCode",{parentName:"p"},"bazel")," build tool, which you can find\ninstallation instructions for\n",Object(o.b)("a",{parentName:"p",href:"https://docs.bazel.build/versions/master/install.html"},"here"),"."),Object(o.b)("p",null,"After installing bazel, all of the Sage implementations can be built\nby running:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"bazel build //sage/...\n")),Object(o.b)("p",null,"This command will compile binaries and store them in the top-level\n",Object(o.b)("inlineCode",{parentName:"p"},"bazel-bin")," directory. For example, the BFS benchmark is located at:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"bazel-bin/sage/benchmarks/BFS/BFS_main\n")),Object(o.b)("h2",{id:"graph-formats"},"Graph Formats"),Object(o.b)("p",null,"The code currently requires users to use either the binary\ncompressed-sparse row format (binary CSR), or the parallel byte-encoded\ncompressed-sparse row format (parallel-byte CSR). Both formats are supported by GBBS, and\nwe provide more information about the formats\n",Object(o.b)("a",{parentName:"p",href:"https://paralg.github.io/gbbs/docs/formats"},"here"),"."),Object(o.b)("p",null,"The default format is the binary CSR. Specifying that the input graph\nis compressed is done through the command-line argument ",Object(o.b)("inlineCode",{parentName:"p"},"-c"),"."),Object(o.b)("h2",{id:"running"},"Running"))}s.isMDXComponent=!0}}]);