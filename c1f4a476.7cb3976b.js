(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{130:function(e,n,a){"use strict";a.r(n),a.d(n,"frontMatter",(function(){return s})),a.d(n,"metadata",(function(){return o})),a.d(n,"rightToc",(function(){return c})),a.d(n,"default",(function(){return l}));var r=a(1),t=a(6),i=(a(0),a(147)),s={id:"run",title:"Running Benchmarks"},o={id:"run",title:"Running Benchmarks",description:"The applications take the input graph as input as well as an optional",source:"@site/docs/run.md",permalink:"/gbbs/docs/run",sidebar:"docs",previous:{title:"Install and Compile",permalink:"/gbbs/docs/install"},next:{title:"Graph Formats",permalink:"/gbbs/docs/formats"}},c=[{value:"Running code on compressed graphs",id:"running-code-on-compressed-graphs",children:[]},{value:"Running code on binary-encoded graphs",id:"running-code-on-binary-encoded-graphs",children:[]}],p={rightToc:c};function l(e){var n=e.components,a=Object(t.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},p,a,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,'The applications take the input graph as input as well as an optional\nflag "-s" to indicate a symmetric graph.  Symmetric graphs should be\ncalled with the "-s" flag for better performance. For example:'),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-sh"}),"# For Bazel:\n$ bazel run //benchmarks/BFS/NonDeterministicBFS:BFS_main -- -s -src 10 ~/gbbs/inputs/rMatGraph_J_5_100\n$ bazel run //benchmarks/IntegralWeightSSSP/JulienneDBS17:wBFS_main -- -s -w -src 15 ~/gbbs/inputs/rMatGraph_WJ_5_100\n\n# For Make:\n$ ./BFS -s -src 10 ../../../inputs/rMatGraph_J_5_100\n$ ./wBFS -s -w -src 15 ../../../inputs/rMatGraph_WJ_5_100\n")),Object(i.b)("p",null,"Note that the codes that compute single-source shortest paths (or centrality)\ntake an extra ",Object(i.b)("inlineCode",{parentName:"p"},"-src")," flag. The benchmark is run four times by default, and can\nbe changed by passing the ",Object(i.b)("inlineCode",{parentName:"p"},"-rounds")," flag followed by an integer indicating the\nnumber of runs."),Object(i.b)("p",null,'On NUMA machines, adding the command "numactl -i all " when running\nthe program may improve performance for large graphs. For example:'),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-sh"}),"$ numactl -i all bazel run [...]\n")),Object(i.b)("h2",{id:"running-code-on-compressed-graphs"},"Running code on compressed graphs"),Object(i.b)("p",null,"We make use of the bytePDA format in our benchmark, which is similar to the\nparallelByte format of Ligra+, extended with additional functionality. We have\nprovided a converter utility which takes as input an uncompressed graph and\noutputs a bytePDA graph. The converter can be used as follows:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-sh"}),"# For Bazel:\nbazel run //utils:compressor -- -s -o ~/gbbs/inputs/rMatGraph_J_5_100.bytepda ~/gbbs/inputs/rMatGraph_J_5_100\nbazel run //utils:compressor -- -s -w -o ~/gbbs/inputs/rMatGraph_WJ_5_100.bytepda ~/gbbs/inputs/rMatGraph_WJ_5_100\n\n# For Make:\n./compressor -s -o ../inputs/rMatGraph_J_5_100.bytepda ../inputs/rMatGraph_J_5_100\n./compressor -s -w -o ../inputs/rMatGraph_WJ_5_100.bytepda ../inputs/rMatGraph_WJ_5_100\n")),Object(i.b)("p",null,"After an uncompressed graph has been converted to the bytepda format,\napplications can be run on it by passing in the usual command-line flags, with\nan additional ",Object(i.b)("inlineCode",{parentName:"p"},"-c")," flag."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-sh"}),"# For Bazel:\n$ bazel run //benchmarks/BFS/NonDeterministicBFS:BFS_main -- -s -c -src 10 ~/gbbs/inputs/rMatGraph_J_5_100.bytepda\n\n# For Make:\n$ ./BFS -s -c -src 10 ../../../inputs/rMatGraph_J_5_100.bytepda\n$ ./wBFS -s -w -c -src 15 ../../../inputs/rMatGraph_WJ_5_100.bytepda\n")),Object(i.b)("p",null,"When processing large compressed graphs, using the ",Object(i.b)("inlineCode",{parentName:"p"},"-m")," command-line flag can\nhelp if the file is already in the page cache, since the compressed graph data\ncan be mmap'd. Application performance will be affected if the file is not\nalready in the page-cache. We have found that using ",Object(i.b)("inlineCode",{parentName:"p"},"-m")," when the compressed\ngraph is backed by SSD results in a slow first-run, followed by fast subsequent\nruns."),Object(i.b)("h2",{id:"running-code-on-binary-encoded-graphs"},"Running code on binary-encoded graphs"),Object(i.b)("p",null,"We make use of a binary-graph format in our benchmark. The binary representation\nstores the representation we use for in-memory processing (compressed sparse row)\ndirectly on disk, which enables applications to avoid string-conversion overheads\nassociated with the adjacency graph format described below. We have provided a\nconverter utility which takes as input an uncompressed graph (e.g., in adjacency\ngraph format) and outputs this graph in the binary format. The converter can be\nused as follows:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-sh"}),"# For Bazel:\nbazel run //utils:compressor -- -s -o ~/gbbs/inputs/rMatGraph_J_5_100.binary ~/gbbs/inputs/rMatGraph_J_5_100\n\n# For Make:\n./compressor -s -o ../inputs/rMatGraph_J_5_100.binary ../inputs/rMatGraph_J_5_100\n")),Object(i.b)("p",null,"After an uncompressed graph has been converted to the binary format,\napplications can be run on it by passing in the usual command-line flags, with\nan additional ",Object(i.b)("inlineCode",{parentName:"p"},"-b")," flag. Note that the application will always load the binary\nfile using mmap."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-sh"}),"# For Bazel:\n$ bazel run //benchmarks/BFS/NonDeterministicBFS:BFS_main -- -s -b -src 10 ~/gbbs/inputs/rMatGraph_J_5_100.binary\n\n# For Make:\n$ ./BFS -s -b -src 10 ../../../inputs/rMatGraph_J_5_100.binary\n")),Object(i.b)("p",null,"Note that application performance will be affected if the file is not already\nin the page-cache. We have found that using ",Object(i.b)("inlineCode",{parentName:"p"},"-m")," when the binary graph is backed\nby SSD or disk results in a slow first-run, followed by fast subsequent runs."))}l.isMDXComponent=!0},147:function(e,n,a){"use strict";a.d(n,"a",(function(){return b})),a.d(n,"b",(function(){return d}));var r=a(0),t=a.n(r);function i(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function s(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?s(Object(a),!0).forEach((function(n){i(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function c(e,n){if(null==e)return{};var a,r,t=function(e,n){if(null==e)return{};var a,r,t={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],n.indexOf(a)>=0||(t[a]=e[a]);return t}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(t[a]=e[a])}return t}var p=t.a.createContext({}),l=function(e){var n=t.a.useContext(p),a=n;return e&&(a="function"==typeof e?e(n):o({},n,{},e)),a},b=function(e){var n=l(e.components);return t.a.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.a.createElement(t.a.Fragment,{},n)}},h=Object(r.forwardRef)((function(e,n){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),b=l(a),h=r,d=b["".concat(s,".").concat(h)]||b[h]||u[h]||i;return a?t.a.createElement(d,o({ref:n},p,{components:a})):t.a.createElement(d,o({ref:n},p))}));function d(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=a.length,s=new Array(i);s[0]=h;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var p=2;p<i;p++)s[p]=a[p];return t.a.createElement.apply(null,s)}return t.a.createElement.apply(null,a)}h.displayName="MDXCreateElement"}}]);